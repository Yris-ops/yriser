{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#yriser-documentation","title":"Yriser Documentation","text":"<p>Welcome to Yriser Open Source Documentation! \ud83d\udcc4</p> <p>You are currently in the Getting Started section where you can find general information and requirements to help start with the tool.</p> <ul> <li>In the Tutorials section you will see how to take advantage of all the features in Yriser.</li> <li>In the Best Practices section you will see who implement a tagging strategy.</li> <li>In the Contact Us section you can find how to reach us out in case of technical issues.</li> <li>In the About section you will find more information about the Yriser team and license.</li> </ul>"},{"location":"#about-yriser","title":"About Yriser","text":"<p>Yriser is an Open Source FinOps tool to perform AWS tagging best practices, tagging strategy, continuous adjustments in cloud optimization.</p> <p>Yriser will help you answer these questions:</p> <ul> <li>How are tags enforced and what methods and automation will be used (proactive vs reactive)?</li> <li>How are tagging effectiveness and goals measured?</li> <li>How often should the tagging strategy be reviewed?</li> <li>Who drives improvements? How is this done?</li> </ul> <p> </p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Yriser has been written in Shell using the <code>jq</code>, <code>bc</code> and AWS CLI.</p> <p>See Requirements section to install <code>jq</code>, <code>bc</code> and AWS CLI.</p>"},{"location":"#installation","title":"Installation","text":"<p>Once Yriser repository is cloned, get into the folder and you can run it:</p> GenericDockermacOSAmazon Linux 2AWS CloudShell <p>Requirements:</p> <ul> <li><code>jq</code></li> <li><code>bc</code></li> <li><code>aws cli</code></li> <li>AWS credentials</li> </ul> <p>Commands:</p> <pre><code>git clone https://github.com/yris-ops/yriser\nchmod -R +x yriser/\ncd yriser\n./yriser.sh -v\n</code></pre> <p>Requirements:</p> <ul> <li>Have <code>docker</code> installed: https://docs.docker.com/get-docker/.</li> <li>AWS credentials</li> <li>In the command below, change <code>-v</code> to your local directory path in order to access the reports.</li> </ul> <p>Commands:</p> <pre><code>docker run -it \\\n--name yriser \\\n--env AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \\\n--env AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \\\n--env AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN \\\n-v /your/local/dir/config.txt:/home/yriser/config.txt \\\nczantoine/yriser:latest\n</code></pre> <p>Requirements:</p> <ul> <li><code>brew install jq</code></li> <li><code>brew install bc</code></li> <li><code>aws cli</code></li> <li>AWS credentials</li> </ul> <p>Commands:</p> <pre><code>git clone https://github.com/yris-ops/yriser\nchmod -R +x yriser/\ncd yriser\n./yriser.sh -v\n</code></pre> <p>Requirements:</p> <ul> <li><code>sudo yum install jq</code></li> <li><code>sudo yum install bc</code></li> <li>AWS credentials</li> </ul> <p>Commands:</p> <pre><code>git clone https://github.com/yris-ops/yriser\nchmod -R +x yriser/\ncd yriser\n./yriser.sh -v\n</code></pre> <p>Requirements:</p> <ul> <li><code>sudo yum install jq</code></li> <li><code>sudo yum install bc</code></li> <li>AWS credentials</li> </ul> <p>Commands:</p> <pre><code>git clone https://github.com/yris-ops/yriser\nchmod -R +x yriser/\ncd yriser\n./yriser.sh -v\n</code></pre>"},{"location":"#configuration-file","title":"Configuration file","text":"<p>Edit the configuration file </p> <pre><code>vi config.txt\n</code></pre> <p>Below <code>## TAG KEY</code> and between <code>## TAG VALUE</code> place your tag keys. </p> <p>Below <code>## TAG VALUE</code> and between <code>## END</code> place your tag values.</p> <p>More options and executions methods that will save your time in Configuration file</p>"},{"location":"#high-level-architecture","title":"High level architecture","text":"<p>You can run Yriser from your workstation, an EC2 instance, ECS Fargate or any other container, Codebuild, CloudShell, Cloud9 and many more.</p> <p></p>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>./yriser.sh\n</code></pre> <p>Running the <code>yriser.sh</code> script whitout options will use your environment variable credentials, see Requirements section to review the credentials settings.</p> <p>By default, Yriser will generate a CSV and HTM reports.</p> <p>The HTML report will be located in the output directory as the other files and it will look like:</p> <p></p> <p>More options and executions methods that will save your time in Commands</p> <p>You can always use -h to access to the usage information and all the possible options:</p> <pre><code>./yriser.sh -h\n</code></pre>"},{"location":"#aws","title":"AWS","text":"<p>You can always use -a to access to the usage information and all the possible options:</p> <pre><code>./yriser.sh -a\n</code></pre> <p>Use a custom AWS profile with -p and/or AWS regions which you want to audit with -r:</p> <pre><code>./yriser.sh -p &lt;aws_profile&gt; -r \"us-east-1 eu-west-1\"\n</code></pre> <p>By default, Yriser will scan all AWS regions.</p> <p>See more details about AWS Authentication in Requirements.</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#author","title":"Author","text":"<p>Yriser was created by Antoine CICHOWICZ in 2023.</p> Antoine CICHOWICZ"},{"location":"about/#license","title":"License","text":"<p>Yriser is licensed as Apache License 2.0 as specified in each file. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0</p>"},{"location":"about/#big-thank","title":"Big Thank","text":"<p>Dad, thank you for teaching me type my name faster on a keyboard than on a piece of paper. Love.</p> <p> Made with Moof!</p>"},{"location":"contact/","title":"Contact Us","text":"<p>For technical support or any type of inquiries, you are very welcome to:</p> <ul> <li> <p>Reach out to community members on the Yris Slack channel.</p> </li> <li> <p>Open an Issue or a Pull Request in our GitHub repository.</p> </li> </ul> <p>Feel free to reach out to me if you have any question!</p> <p>We will appreciate all types of feedback and contribution, Yriser would not be the same without our vibrant community! \ud83d\udd4a\ufe0f</p>"},{"location":"security/","title":"Security","text":""},{"location":"security/#software-security","title":"Software Security","text":"<p>We use the following tools and automation to make sure our code is secure and dependencies up-to-dated:</p> <ul> <li><code>docker scout</code> in Docker Hubs.</li> </ul>"},{"location":"security/#reporting-vulnerabilities","title":"Reporting Vulnerabilities","text":"<p>If you discover a potential security issue in this project we ask that you notify @czantoine. Please do not create a public github issue.</p>"},{"location":"getting-started/requirements/","title":"Requirements","text":"<p>Yriser has been written in Shell using the <code>jq</code>, <code>bc</code> and AWS CLI.</p>"},{"location":"getting-started/requirements/#install-jq","title":"Install <code>jq</code>","text":"Operating System Installation Instructions Available jq Versions Linux sudo apt-get install jq (Debian/Ubuntu) 1.6 (64-bit), 1.5, 1.4, 1.3 (64/32-bit) Linux sudo dnf install jq (Fedora) Linux sudo zypper install jq (openSUSE) Linux sudo pacman -S jq (Arch) macOS brew install jq (Homebrew) 1.6 (64-bit), 1.5, 1.4, 1.3 (64-bit) macOS port install jq (MacPorts) macOS fink install jq (Fink) FreeBSD pkg install jq (pre-built) FreeBSD make -C /usr/ports/textproc/jq install clean (from source) Solaris pkgutil -i jq (OpenCSW)"},{"location":"getting-started/requirements/#install-bc","title":"Install <code>bc</code>","text":"Operating System Installation Instructions Linux sudo apt-get install bc (Debian/Ubuntu) Linux sudo dnf install bc (Fedora) Linux sudo zypper install bc (openSUSE) Linux sudo pacman -S bc (Arch) macOS brew install bc (Homebrew) macOS port install bc (MacPorts) macOS fink install bc (Fink) FreeBSD pkg install bc (pre-built) FreeBSD make -C /usr/ports/math/bc install clean (from source) Solaris pkgutil -i bc (OpenCSW) Solaris bc 1.07.1 binaries for Solaris 11 (64-bit/32-bit)"},{"location":"getting-started/requirements/#aws","title":"AWS","text":""},{"location":"getting-started/requirements/#aws-cli","title":"AWS CLI","text":"<p>Please refer to the AWS documentation</p>"},{"location":"getting-started/requirements/#aws-authentication","title":"AWS Authentication","text":"<p>Make sure you have properly configured your AWS-CLI with a valid Access Key and Region or declare AWS variables properly (or instance profile/role):</p> <pre><code>aws configure sso\n</code></pre> <p>or</p> <pre><code>export AWS_ACCESS_KEY_ID=\"ASXXXXXXX\"\nexport AWS_SECRET_ACCESS_KEY=\"XXXXXXXXX\"\nexport AWS_SESSION_TOKEN=\"XXXXXXXXX\"\n</code></pre>"},{"location":"tutorials/command/","title":"Command","text":""},{"location":"tutorials/command/#help","title":"Help","text":"<p>Display help documentation:</p> <pre><code>./yriser.sh -h\n</code></pre>"},{"location":"tutorials/command/#yriser-version","title":"Yriser Version","text":"<p>Show Yriser version:</p> <pre><code>./yriser.sh -v\n</code></pre>"},{"location":"tutorials/command/#hide-yriser-banner","title":"Hide Yriser Banner","text":"<p>Yriser can run without showing its banner:</p> <pre><code>./yriser.sh -b\n</code></pre>"},{"location":"tutorials/command/#display-configuration-file","title":"Display Configuration file","text":"<p>Show <code>config.txt</code> file:</p> <pre><code>./yriser.sh -c\n</code></pre>"},{"location":"tutorials/command/#disable-html-output","title":"Disable HTML output","text":"<p>Only CLI Input without HTML</p> <pre><code>./yriser.sh -o\n</code></pre> <p>Do not disable output without CSV (command -u) for the HTML outputs</p>"},{"location":"tutorials/command/#disable-csv-output","title":"Disable CSV output","text":"<p>Only CLI Input without CSV</p> <pre><code>./yriser.sh -u\n</code></pre>"},{"location":"tutorials/command/#disable-json-output","title":"Disable JSON output","text":"<p>Only CLI Input without JSON.</p> <pre><code>./yriser.sh -j\n</code></pre> <p>Do not disable output without CSV (command -u) for the JSON outputs</p>"},{"location":"tutorials/command/#slack","title":"Slack","text":"<p>Send report result to Slack</p> <pre><code>./yriser.sh -w &lt;webhook_token&gt;\n</code></pre>"},{"location":"tutorials/command/#aws","title":"AWS","text":""},{"location":"tutorials/command/#aws-display-help-documentation","title":"AWS - Display help documentation","text":"<p>Display help documentation for AWS provider:</p> <pre><code>./yriser.sh -a\n</code></pre>"},{"location":"tutorials/command/#scan-specific-aws-region","title":"Scan specific AWS Region","text":"<p>Yriser can scan specific region(s) with:</p> <pre><code>./yriser.sh -r \"us-east-1 eu-west-1\"\n</code></pre>"},{"location":"tutorials/command/#use-aws-profile","title":"Use AWS Profile","text":"<p>Yriser can use your custom AWS Profile with:</p> <pre><code>./yriser.sh -p &lt;aws_profile&gt;\n</code></pre>"},{"location":"tutorials/command/#send-report-to-aws-s3-bucket","title":"Send report to AWS S3 Bucket","text":"<p>To save your report in an S3 bucket, use -s to be uploaded to S3:</p> <pre><code>./yriser.sh -s bucket-yriser-demo\n</code></pre>"},{"location":"tutorials/configuration-file/","title":"Configuration file","text":"<p>Edit the configuration file </p> <pre><code>vi config.txt\n</code></pre> <p>Below <code>## TAG KEY</code> and between <code>## TAG VALUE</code> place your tag keys. </p> <p>Below <code>## TAG VALUE</code> and between <code>## END</code> place your tag values.</p> <p>Here's an example with a tag that you want to associate with multiple rules and a tag that needs to be added to the resource, but you don't have a specific value strategy.</p> <pre><code>## TAG KEY\nEnvironment \nDate\n## TAG VALUE\n(\"development\" \"test\" \"production\")\n()\n## END\n</code></pre> <p>We have associated \"Environment\" with \"development\" \"test\" and \"production\". As for \"Date\" we cannot associate it with every date of the year, so we leave it blank <code>()</code>.</p> <p>This means that each resource must have the Key \"Environment\" and the value should be one of these values: \"development\" \"test\" or \"production.\" Each resource must have at least the Key \"Date.\"</p> <p>Yriser handles special characters in the tag key <code>:</code> and <code>-</code>.</p>"},{"location":"tutorials/reporting/","title":"Reporting","text":"<p>By default, Yriser will generate a CSV and a HTML report</p>"},{"location":"tutorials/reporting/#output-formats","title":"Output Formats","text":"<p>Prowler supports natively the following output formats:</p> <ul> <li>CLI</li> <li>CSV</li> <li>HTML</li> <li>JSON</li> </ul> <p>Hereunder is the structure for each of the supported report formats by Yriser:</p>"},{"location":"tutorials/reporting/#html","title":"HTML","text":"<p>The html report will be located in the output directory as the other files and it will look like:</p> <p></p>"},{"location":"tutorials/reporting/#csv","title":"CSV","text":""},{"location":"tutorials/reporting/#tag-assessment-details","title":"Tag Assessment Details:","text":"ASSESSMENT_START_TIME TAG KEY TAG VALUE RESOURCE_ID ACCOUNT_ID REGION"},{"location":"tutorials/reporting/#multiple-tag","title":"Multiple Tag:","text":"TAG VALUE NUMBER"},{"location":"tutorials/reporting/#json","title":"JSON","text":"<pre><code>[\n  {\n    \"ASSESSMENT_START_TIME\": \"2023-08-15T05:42:36Z\",\n    \"TAG_KEY\": \"without tag\",\n    \"TAG_VALUE\": \"none\",\n    \"RESOURCE_ID\": \"rule/yriser-rule\",\n    \"ACCOUNT_ID\": \"1234567890\",\n    \"REGION\": \"us-east-1\"\n  },\n  {\n    \"ASSESSMENT_START_TIME\": \"2023-08-15T05:42:36Z\",\n    \"TAG_KEY\": \"without tag\",\n    \"TAG_VALUE\": \"none\",\n    \"RESOURCE_ID\": \"rule/yriser-policy\",\n    \"ACCOUNT_ID\": \"1234567890\",\n    \"REGION\": \"us-east-1\"\n  }\n]\n</code></pre> <p>Multiple Tag:</p> <pre><code>[\n  {\n    \"TAG_VALUE\": \"Date_list:\",\n    \"NUMBER\": null\n  }\n]\n</code></pre>"},{"location":"tutorials/reporting/#slack","title":"Slack","text":"<p>Send a notification on Slack when the audit is complete.</p> <p></p> <p>See Slack documentation to create a weebhook</p>"},{"location":"tutorials/aws/authentication/","title":"AWS Authentication","text":"<p>Make sure you have properly configured your AWS-CLI with a valid Access Key and Region or declare AWS variables properly (or instance profile/role):</p> <pre><code>aws configure\n</code></pre> <p>or</p> <pre><code>export AWS_ACCESS_KEY_ID=\"ASXXXXXXX\"\nexport AWS_SECRET_ACCESS_KEY=\"XXXXXXXXX\"\nexport AWS_SESSION_TOKEN=\"XXXXXXXXX\"\n</code></pre>"},{"location":"tutorials/aws/cloudshell/","title":"AWS CloudShell","text":"<p>Yriser can be easely executed in AWS CloudShell.</p> <pre><code>git clone https://github.com/yris-ops/yriser.git\n./yriser.sh\n</code></pre> <p>Now enjoy Yriser</p> <p>To download the results from AWS CloudShell, select Actions -&gt; Download File and add the full path of each file. For the CSV file it will be something like /home/cloudshell-user/yriser/output/</p>"},{"location":"tutorials/best-pratices/build/","title":"Building your tagging strategy","text":""},{"location":"tutorials/best-pratices/build/#defining-needs-and-use-cases","title":"Defining needs and use cases","text":"<p>As with many practices in operations, implementing a tagging strategy is a process of iteration and improvement. Start small with your immediate priority and grow the tagging schema as you need to.</p> <p>Start building your strategy by engaging with stakeholders who have a fundamental underlying need to consume metadata. These teams define the metadata that resources need to be tagged with to support their activities, such as reporting, automation, and data classification. They outline how the resources need to be organized and which policies they need to be mapped to. Examples of roles and functions that these stakeholders can have in organizations include:</p> <ul> <li>Finance and Line of Business need to understand the value of investment by mapping it to costs to prioritize actions that need to be taken when addressing ine\ufb03ciency. Understanding cost vs value generated helps to identify unsuccessful lines of business or product offerings. This leads to informed decisions about continuing support, adopting an alternative (for example, using a SaaS offering or managed service), or retiring an unprofitable business offering.</li> <li>Governance and Compliance need to understand the categorization of data (for example, public, sensitive, or confidential), whether a specific workload is in or out of scope for audit against a specific standard or regulation and the criticality of the service (whether the service or application is business-critical) to apply appropriate controls and oversight, such as permissions, policies, and monitoring.</li> <li>Operations and Development need to understand the workload lifecycle and implemented stages of their supported products. Management of release stages, (for example, Development, Test, Production split) and their associated support prioritizations and stakeholder management requirements. Duties such as Backups, Patching, Observability and Deprecation also need to be defined and understood.</li> <li>Information Security (InfoSec) and Security Operations (SecOps) outline what controls must be applied and which are recommended. InfoSec normally defines the implementation of the controls, and SecOps is generally responsible for managing those controls.</li> </ul>"},{"location":"tutorials/best-pratices/build/#defining-and-publishing-a-tagging-schema","title":"Defining and publishing a tagging schema","text":"<p>Employ a consistent approach in tagging your AWS resources, both for mandatory and optional tags. A comprehensive tagging schema helps you to achieve this consistency. The following examples can help get you started:</p> <ul> <li>Agree on the mandatory tag keys</li> <li>Define acceptable values and tag naming conventions (upper or lower case, dashes or underscores, hierarchy, and so on)</li> <li>Confirm values would not constitute personally identifiable information (PII)</li> <li>Decide who can define and create new tag keys</li> <li>Agree on how to add new mandatory tag values and how to manage optional tags</li> </ul> <p>Best pratices refers to the AWS white paper</p>"},{"location":"tutorials/best-pratices/cost-allocation/","title":"Tags for cost allocation and financial management","text":""},{"location":"tutorials/best-pratices/cost-allocation/#maximizing-cost-visibility-and-financial-management","title":"Maximizing Cost Visibility and Financial Management","text":"<p>One of the first tagging use cases organizations often tackle is visibility and management of cost and usage. There are usually a few reasons for this:</p> <ul> <li> <p>It's typically a well understood scenario and requirements are well known. For example, finance teams want to see the total cost of workloads and infrastructure that span across multiple services, features, accounts, or teams. One way to achieve this cost visibility is through consistent tagging of resources.</p> </li> <li> <p>Tags and their values are clearly defined. Usually, cost allocation mechanisms already exist in an organization\u2019s finance systems, for example, tracking by cost center, business unit, team, or organization function.</p> </li> <li> <p>Rapid, demonstrable return on investment. It\u2019s possible to track cost optimization trends over time when resources are tagged consistently, for example, for resources that were rightsized, auto-scaled, or put on a schedule.</p> </li> </ul> <p>Understanding how you incur costs in cloud provider allows you to make informed financial decisions. Knowing where you have incurred costs at the resource, workload, team, or organization level enhances your understanding of the value delivered at the applicable level when compared to the business outcomes achieved.</p> <ul> <li>The engineering teams might not have experience with financial management of their resources. Attaching a person with a specialized skill in cloud provider financial management who can train engineering and development teams on the basics of financial management, and create a relationship between finance and engineering to foster the culture of FinOps will help achieve measurable outcomes for the business, and encourage teams to build with cost in mind. Establishing good financial practices is covered in depth by the Cost Optimization Pillar of the Well-Architected Framework, but we will touch on a few of the fundamental principles in this whitepaper.</li> </ul>"},{"location":"tutorials/best-pratices/cost-allocation/#implementing-effective-resource-tagging-strategies","title":"Implementing Effective Resource Tagging Strategies","text":"<ul> <li>Cost Center: You can use a tag to indicate the cost center responsible for the resource. This facilitates cost attribution to specific entities within your organization.</li> <li>Business Unit: If your organization is divided into distinct business units, you can use a tag to identify the business unit to which the resource belongs. This provides better visibility into costs associated with each business unit.</li> <li>Environment: If you have multiple environments (e.g., development, test, production), you can use a tag to indicate the environment to which the resource belongs. This can help track costs by environment and identify optimization opportunities specific to each environment.</li> <li>Project: If you allocate resources to specific projects, you can use a tag to indicate the corresponding project. This facilitates cost tracking by project and evaluation of project profitability.</li> <li>Owner: You can use a tag to indicate the owner or person responsible for the resource. This facilitates communication and cost accountability.</li> <li>Resource Type: You can use a tag to indicate the type of resource, such as database, EC2 instance, managed service, etc. This allows grouping costs by resource type and better understanding of cost distribution.</li> <li>Creation Date: By adding a tag with the resource's creation date, you can track the lifespan of resources and assess their cost impact over time.</li> </ul> <p>These examples are just a starting point, and you can add additional tags based on your specific needs. The goal is to choose tags that enable you to categorize and analyze costs meaningfully for your organization.</p>"},{"location":"tutorials/best-pratices/example/","title":"Example Tagging Strategies","text":"<ul> <li>Cost Center: You can use a tag to indicate the cost center responsible for the resource. This facilitates cost attribution to specific entities within your organization.</li> <li>Business Unit: If your organization is divided into distinct business units, you can use a tag to identify the business unit to which the resource belongs. This provides better visibility into costs associated with each business unit.</li> <li>Environment: If you have multiple environments (e.g., development, test, production), you can use a tag to indicate the environment to which the resource belongs. This can help track costs by environment and identify optimization opportunities specific to each environment.</li> <li>Project: If you allocate resources to specific projects, you can use a tag to indicate the corresponding project. This facilitates cost tracking by project and evaluation of project profitability.</li> </ul>"},{"location":"tutorials/best-pratices/example/#environment","title":"Environment","text":"<p>If you have multiple environments, you can use a tag to indicate the environment to which the resource belongs. This can help track costs by environment and identify optimization opportunities specific to each environment.</p> <p>development, test, production</p> Key Value Env development Environment test production"},{"location":"tutorials/best-pratices/example/#project","title":"Project","text":"<p>If you allocate resources to specific projects, you can use a tag to indicate the corresponding project. This facilitates cost tracking by project and evaluation of project profitability.</p> Key Value Projet yriser"},{"location":"tutorials/best-pratices/example/#owner","title":"Owner","text":"<p>You can use a tag to indicate the owner or person responsible for the resource. This facilitates communication and cost accountability.</p> Key Value Owner devops Jane Doe"},{"location":"tutorials/best-pratices/example/#resource-type","title":"Resource Type","text":"<p>You can use a tag to indicate the type of resource, such as database, EC2 instance, managed service, etc. This allows grouping costs by resource type and better understanding of cost distribution.</p> Key Value Resource ec2 s3"},{"location":"tutorials/best-pratices/example/#business-unit","title":"Business Unit","text":"<p>Cost allocatable to teams within an enterprise. This model requires a moderate amount of effort, provides high accuracy for showbacks and chargebacks, and is suitable for organizations that have a defined account structure</p> Key Value Business Unit prod staging test dev sandbox"},{"location":"tutorials/best-pratices/example/#team-based","title":"Team-based","text":"<p>Cost allocatable to teams or organizations within an enterprise. This model requires a moderate amount of effort, provides high accuracy for showbacks and chargebacks, and is suitable for organizations that have a defined account structure</p> Key Value Team ops-center dev-ops app-team bi-team logistics security"},{"location":"tutorials/best-pratices/example/#creation-date","title":"Creation Date","text":"<p>By adding a tag with the resource's creation date, you can track the lifespan of resources and assess their cost impact over time.</p> Key Value Date 06.07.2023"}]}